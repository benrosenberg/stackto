digraph "flowchart of .\\tests\\operatortests.stackto" {
	label="flowchart of .\\tests\\operatortests.stackto"
	labelloc=t
	fontsize=28
	fontname=Arial
	node [fontname=Consolas]
	edge [fontname=Consolas]
	node [shape=tab]
	"('mark', 'binops')"
	node [shape=oval]
	node [shape=tab]
	"('mark', 'nops')"
	node [shape=oval]
	node [shape=tab]
	"('mark', 'end')"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['running unops']\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['# COLON ' 1 2 3 3 \\ # 3 = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['~ COLON ' 1 ~ -1 = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['! COLON ' f ! t = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['? COLON ' f ? f = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['? COLON ' 0 ? f = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['? COLON ' 1 ? t = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['? COLON ' 1.5 ? t = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['? COLON ' '' ? f = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['? COLON ' 'a' ? t = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['num COLON ' '1' num 1 = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['num COLON ' '-1' num -1 = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['num COLON ' f num 0 = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['num COLON ' t num 1 = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['splat COLON ' 1 2 3 3 \\ splat + + 6 = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['splat COLON ' 2.0 -4 '1' 3 \\ splat num + + -1 = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['splat COLON ' 1 2 3 3 \\ 4 5 6 3 \\ 2 \\ splat @ 1 2 3 4 5 6 6 \\ = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['dup COLON ' 3 dup + 6 = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['dup COLON ' '3' dup + '33' = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['dup COLON ' false dup = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['drop COLON ' 1 2 3 drop + 3 = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['str COLON ' 1 str '1.0' = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['str COLON ' 1 2 3 3 \\ str '[1.0, 2.0, 3.0]' = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['round COLON ' 1 round 1 = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['round COLON ' 1.5 round 2 = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['round COLON ' -1.1 round -1 = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['sum COLON ' 1 2 3 3 \\ sum 6 = str + ]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['sum COLON ' 1 -2 3 3 \\ sum 2 = str + ]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['prod COLON ' 1 2 3 3 \\ prod 6 = str + ]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['prod COLON ' 1 -2 3 3 \\ prod -6 = str + ]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['type COLON ' 1 type 'number' = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['type COLON ' 0 \\ type 'list' = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['type COLON ' t type 'bool' = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['type COLON ' 'test' type 'string' = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['running binops']\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['< COLON ' 1 2 < t = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['< COLON ' 2 1 < f = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['< COLON ' 2 2 < f = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['> COLON ' 1 2 > f = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['> COLON ' 2 1 > t = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['> COLON ' 2 2 > f = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['<= COLON ' 1 2 <= t = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['<= COLON ' 2 1 <= f = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['<= COLON ' 2 2 <= t = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['>= COLON ' 1 2 >= f = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['>= COLON ' 2 1 >= t = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['>= COLON ' 2 2 >= t = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['= COLON ' 2 2 = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['= COLON ' 2 1 = ! str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['= COLON ' 2 '2' = ! str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['= COLON ' 2 2.0 = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['== COLON ' 2 2 == str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['== COLON ' 2 1 == ! str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['== COLON ' 2 '2' == ! str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['== COLON ' 2 2.0 == str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['<> COLON ' 2 2 <> ! str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['<> COLON ' 2 1 <> str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['<> COLON ' 2 '2' <> str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['<> COLON ' 2 2.0 <> ! str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['!= COLON ' 2 2 != ! str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['!= COLON ' 2 1 !=  str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['!= COLON ' 2 '2' !=  str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['!= COLON ' 2 2.0 != ! str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['& COLON ' f f & ! str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['& COLON ' t f & ! str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['& COLON ' f t & ! str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['& COLON ' t t & str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['^ COLON ' f f ^ ! str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['^ COLON ' t f ^ str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['^ COLON ' f t ^ str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['^ COLON ' t t ^ ! str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['| COLON ' f f | ! str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['| COLON ' t f | str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['| COLON ' f t | str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['| COLON ' t t | str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['+ COLON ' 1 1 + 2 = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['+ COLON ' 1 -1 + 0 = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['+ COLON ' '1' '-1' + '1-1' = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['+ COLON ' '1' '' + '1' = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['- COLON ' 1 1 - 0 = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['- COLON ' 1 -1 - 2 = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['* COLON ' 1 1 * 1 = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['* COLON ' 1 -1 * -1 = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['* COLON ' 3 4 * 12 = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['* COLON ' '1' 4 * '1111' = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['* COLON ' '' 4 * '' = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['/ COLON ' 1 2 / 0.5 = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['/ COLON ' 2 2 / 1 = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['/ COLON ' 1 -2 / -0.5 = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['/ COLON ' 0 1 / 0 = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['// COLON ' 1 2 // 0 = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['// COLON ' 2 2 // 1 = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['// COLON ' 2 1 // 2 = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['// COLON ' 1 -2 // -1 = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['// COLON ' 0 1 // 0 = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['% COLON ' 5 1 % 0 = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['% COLON ' 5 2 % 1 = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['% COLON ' 1 3 % 1 = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['@ COLON ' 1 2 3 3 \\ 4 5 6 3 \\ @ 1 2 3 4 5 6 6 \\ = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['@ COLON ' 0 \\ 0 \\ @ 0 \\ = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['@ COLON ' 0 \\ 4 5 6 3 \\ @ 4 5 6 3 \\ = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['COLON COLON ' 0 \\ 1 COLON 1 1 \\ = str + ]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['COLON COLON ' 0 \\ 0 \\ COLON splat # 0 = str + ]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['swap COLON ' 1 2 swap - 1 = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['swap COLON ' 'a' 'b' swap + 'ba' = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['nth COLON ' 1 2 3 3 \\ 2 nth 3 = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['nth COLON ' 1 2 3 3 \\ 0 nth 1 = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['min COLON ' 1 2 min 1 = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['max COLON ' 1 2 max 2 = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['split COLON ' 'test' 't' split '' 'es' '' 3 \\ = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['split COLON ' 'a b c d e f' ' ' split 'a' 'b' 'c' 'd' 'e' 'f' 6 \\ = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['running nops']\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['\\ COLON ' 1 2 3 3 \\ str '[1.0, 2.0, 3.0]' = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['\\ COLON ' 0 \\ str '[]' = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['dropn COLON ' 1 2 3 4 5 2 dropn 3 \\ 1 2 3 3 \\ = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"[1 2 3 4 5 top 'top COLON ' swap 5 = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"[1 2 3 4 5 2 topn + 'topn COLON ' swap 9 = str +]\")"
	node [shape=oval]
	node [shape=note]
	"('outputexp', \"['rand COLON ' rand dup 0 > swap 1 < & str +]\")"
	node [shape=oval]
	"('outputexp', \"['running unops']\")" -> "('outputexp', \"['# COLON ' 1 2 3 3 \\ # 3 = str +]\")"
	"('outputexp', \"['# COLON ' 1 2 3 3 \\ # 3 = str +]\")" -> "('outputexp', \"['~ COLON ' 1 ~ -1 = str +]\")"
	"('outputexp', \"['~ COLON ' 1 ~ -1 = str +]\")" -> "('outputexp', \"['! COLON ' f ! t = str +]\")"
	"('outputexp', \"['! COLON ' f ! t = str +]\")" -> "('outputexp', \"['? COLON ' f ? f = str +]\")"
	"('outputexp', \"['? COLON ' f ? f = str +]\")" -> "('outputexp', \"['? COLON ' 0 ? f = str +]\")"
	"('outputexp', \"['? COLON ' 0 ? f = str +]\")" -> "('outputexp', \"['? COLON ' 1 ? t = str +]\")"
	"('outputexp', \"['? COLON ' 1 ? t = str +]\")" -> "('outputexp', \"['? COLON ' 1.5 ? t = str +]\")"
	"('outputexp', \"['? COLON ' 1.5 ? t = str +]\")" -> "('outputexp', \"['? COLON ' '' ? f = str +]\")"
	"('outputexp', \"['? COLON ' '' ? f = str +]\")" -> "('outputexp', \"['? COLON ' 'a' ? t = str +]\")"
	"('outputexp', \"['? COLON ' 'a' ? t = str +]\")" -> "('outputexp', \"['num COLON ' '1' num 1 = str +]\")"
	"('outputexp', \"['num COLON ' '1' num 1 = str +]\")" -> "('outputexp', \"['num COLON ' '-1' num -1 = str +]\")"
	"('outputexp', \"['num COLON ' '-1' num -1 = str +]\")" -> "('outputexp', \"['num COLON ' f num 0 = str +]\")"
	"('outputexp', \"['num COLON ' f num 0 = str +]\")" -> "('outputexp', \"['num COLON ' t num 1 = str +]\")"
	"('outputexp', \"['num COLON ' t num 1 = str +]\")" -> "('outputexp', \"['splat COLON ' 1 2 3 3 \\ splat + + 6 = str +]\")"
	"('outputexp', \"['splat COLON ' 1 2 3 3 \\ splat + + 6 = str +]\")" -> "('outputexp', \"['splat COLON ' 2.0 -4 '1' 3 \\ splat num + + -1 = str +]\")"
	"('outputexp', \"['splat COLON ' 2.0 -4 '1' 3 \\ splat num + + -1 = str +]\")" -> "('outputexp', \"['splat COLON ' 1 2 3 3 \\ 4 5 6 3 \\ 2 \\ splat @ 1 2 3 4 5 6 6 \\ = str +]\")"
	"('outputexp', \"['splat COLON ' 1 2 3 3 \\ 4 5 6 3 \\ 2 \\ splat @ 1 2 3 4 5 6 6 \\ = str +]\")" -> "('outputexp', \"['dup COLON ' 3 dup + 6 = str +]\")"
	"('outputexp', \"['dup COLON ' 3 dup + 6 = str +]\")" -> "('outputexp', \"['dup COLON ' '3' dup + '33' = str +]\")"
	"('outputexp', \"['dup COLON ' '3' dup + '33' = str +]\")" -> "('outputexp', \"['dup COLON ' false dup = str +]\")"
	"('outputexp', \"['dup COLON ' false dup = str +]\")" -> "('outputexp', \"['drop COLON ' 1 2 3 drop + 3 = str +]\")"
	"('outputexp', \"['drop COLON ' 1 2 3 drop + 3 = str +]\")" -> "('outputexp', \"['str COLON ' 1 str '1.0' = str +]\")"
	"('outputexp', \"['str COLON ' 1 str '1.0' = str +]\")" -> "('outputexp', \"['str COLON ' 1 2 3 3 \\ str '[1.0, 2.0, 3.0]' = str +]\")"
	"('outputexp', \"['str COLON ' 1 2 3 3 \\ str '[1.0, 2.0, 3.0]' = str +]\")" -> "('outputexp', \"['round COLON ' 1 round 1 = str +]\")"
	"('outputexp', \"['round COLON ' 1 round 1 = str +]\")" -> "('outputexp', \"['round COLON ' 1.5 round 2 = str +]\")"
	"('outputexp', \"['round COLON ' 1.5 round 2 = str +]\")" -> "('outputexp', \"['round COLON ' -1.1 round -1 = str +]\")"
	"('outputexp', \"['round COLON ' -1.1 round -1 = str +]\")" -> "('outputexp', \"['sum COLON ' 1 2 3 3 \\ sum 6 = str + ]\")"
	"('outputexp', \"['sum COLON ' 1 2 3 3 \\ sum 6 = str + ]\")" -> "('outputexp', \"['sum COLON ' 1 -2 3 3 \\ sum 2 = str + ]\")"
	"('outputexp', \"['sum COLON ' 1 -2 3 3 \\ sum 2 = str + ]\")" -> "('outputexp', \"['prod COLON ' 1 2 3 3 \\ prod 6 = str + ]\")"
	"('outputexp', \"['prod COLON ' 1 2 3 3 \\ prod 6 = str + ]\")" -> "('outputexp', \"['prod COLON ' 1 -2 3 3 \\ prod -6 = str + ]\")"
	"('outputexp', \"['prod COLON ' 1 -2 3 3 \\ prod -6 = str + ]\")" -> "('outputexp', \"['type COLON ' 1 type 'number' = str +]\")"
	"('outputexp', \"['type COLON ' 1 type 'number' = str +]\")" -> "('outputexp', \"['type COLON ' 0 \\ type 'list' = str +]\")"
	"('outputexp', \"['type COLON ' 0 \\ type 'list' = str +]\")" -> "('outputexp', \"['type COLON ' t type 'bool' = str +]\")"
	"('outputexp', \"['type COLON ' t type 'bool' = str +]\")" -> "('outputexp', \"['type COLON ' 'test' type 'string' = str +]\")"
	"('outputexp', \"['type COLON ' 'test' type 'string' = str +]\")" -> "('mark', 'binops')"
	"('mark', 'binops')" -> "('outputexp', \"['running binops']\")"
	"('outputexp', \"['running binops']\")" -> "('outputexp', \"['< COLON ' 1 2 < t = str +]\")"
	"('outputexp', \"['< COLON ' 1 2 < t = str +]\")" -> "('outputexp', \"['< COLON ' 2 1 < f = str +]\")"
	"('outputexp', \"['< COLON ' 2 1 < f = str +]\")" -> "('outputexp', \"['< COLON ' 2 2 < f = str +]\")"
	"('outputexp', \"['< COLON ' 2 2 < f = str +]\")" -> "('outputexp', \"['> COLON ' 1 2 > f = str +]\")"
	"('outputexp', \"['> COLON ' 1 2 > f = str +]\")" -> "('outputexp', \"['> COLON ' 2 1 > t = str +]\")"
	"('outputexp', \"['> COLON ' 2 1 > t = str +]\")" -> "('outputexp', \"['> COLON ' 2 2 > f = str +]\")"
	"('outputexp', \"['> COLON ' 2 2 > f = str +]\")" -> "('outputexp', \"['<= COLON ' 1 2 <= t = str +]\")"
	"('outputexp', \"['<= COLON ' 1 2 <= t = str +]\")" -> "('outputexp', \"['<= COLON ' 2 1 <= f = str +]\")"
	"('outputexp', \"['<= COLON ' 2 1 <= f = str +]\")" -> "('outputexp', \"['<= COLON ' 2 2 <= t = str +]\")"
	"('outputexp', \"['<= COLON ' 2 2 <= t = str +]\")" -> "('outputexp', \"['>= COLON ' 1 2 >= f = str +]\")"
	"('outputexp', \"['>= COLON ' 1 2 >= f = str +]\")" -> "('outputexp', \"['>= COLON ' 2 1 >= t = str +]\")"
	"('outputexp', \"['>= COLON ' 2 1 >= t = str +]\")" -> "('outputexp', \"['>= COLON ' 2 2 >= t = str +]\")"
	"('outputexp', \"['>= COLON ' 2 2 >= t = str +]\")" -> "('outputexp', \"['= COLON ' 2 2 = str +]\")"
	"('outputexp', \"['= COLON ' 2 2 = str +]\")" -> "('outputexp', \"['= COLON ' 2 1 = ! str +]\")"
	"('outputexp', \"['= COLON ' 2 1 = ! str +]\")" -> "('outputexp', \"['= COLON ' 2 '2' = ! str +]\")"
	"('outputexp', \"['= COLON ' 2 '2' = ! str +]\")" -> "('outputexp', \"['= COLON ' 2 2.0 = str +]\")"
	"('outputexp', \"['= COLON ' 2 2.0 = str +]\")" -> "('outputexp', \"['== COLON ' 2 2 == str +]\")"
	"('outputexp', \"['== COLON ' 2 2 == str +]\")" -> "('outputexp', \"['== COLON ' 2 1 == ! str +]\")"
	"('outputexp', \"['== COLON ' 2 1 == ! str +]\")" -> "('outputexp', \"['== COLON ' 2 '2' == ! str +]\")"
	"('outputexp', \"['== COLON ' 2 '2' == ! str +]\")" -> "('outputexp', \"['== COLON ' 2 2.0 == str +]\")"
	"('outputexp', \"['== COLON ' 2 2.0 == str +]\")" -> "('outputexp', \"['<> COLON ' 2 2 <> ! str +]\")"
	"('outputexp', \"['<> COLON ' 2 2 <> ! str +]\")" -> "('outputexp', \"['<> COLON ' 2 1 <> str +]\")"
	"('outputexp', \"['<> COLON ' 2 1 <> str +]\")" -> "('outputexp', \"['<> COLON ' 2 '2' <> str +]\")"
	"('outputexp', \"['<> COLON ' 2 '2' <> str +]\")" -> "('outputexp', \"['<> COLON ' 2 2.0 <> ! str +]\")"
	"('outputexp', \"['<> COLON ' 2 2.0 <> ! str +]\")" -> "('outputexp', \"['!= COLON ' 2 2 != ! str +]\")"
	"('outputexp', \"['!= COLON ' 2 2 != ! str +]\")" -> "('outputexp', \"['!= COLON ' 2 1 !=  str +]\")"
	"('outputexp', \"['!= COLON ' 2 1 !=  str +]\")" -> "('outputexp', \"['!= COLON ' 2 '2' !=  str +]\")"
	"('outputexp', \"['!= COLON ' 2 '2' !=  str +]\")" -> "('outputexp', \"['!= COLON ' 2 2.0 != ! str +]\")"
	"('outputexp', \"['!= COLON ' 2 2.0 != ! str +]\")" -> "('outputexp', \"['& COLON ' f f & ! str +]\")"
	"('outputexp', \"['& COLON ' f f & ! str +]\")" -> "('outputexp', \"['& COLON ' t f & ! str +]\")"
	"('outputexp', \"['& COLON ' t f & ! str +]\")" -> "('outputexp', \"['& COLON ' f t & ! str +]\")"
	"('outputexp', \"['& COLON ' f t & ! str +]\")" -> "('outputexp', \"['& COLON ' t t & str +]\")"
	"('outputexp', \"['& COLON ' t t & str +]\")" -> "('outputexp', \"['^ COLON ' f f ^ ! str +]\")"
	"('outputexp', \"['^ COLON ' f f ^ ! str +]\")" -> "('outputexp', \"['^ COLON ' t f ^ str +]\")"
	"('outputexp', \"['^ COLON ' t f ^ str +]\")" -> "('outputexp', \"['^ COLON ' f t ^ str +]\")"
	"('outputexp', \"['^ COLON ' f t ^ str +]\")" -> "('outputexp', \"['^ COLON ' t t ^ ! str +]\")"
	"('outputexp', \"['^ COLON ' t t ^ ! str +]\")" -> "('outputexp', \"['| COLON ' f f | ! str +]\")"
	"('outputexp', \"['| COLON ' f f | ! str +]\")" -> "('outputexp', \"['| COLON ' t f | str +]\")"
	"('outputexp', \"['| COLON ' t f | str +]\")" -> "('outputexp', \"['| COLON ' f t | str +]\")"
	"('outputexp', \"['| COLON ' f t | str +]\")" -> "('outputexp', \"['| COLON ' t t | str +]\")"
	"('outputexp', \"['| COLON ' t t | str +]\")" -> "('outputexp', \"['+ COLON ' 1 1 + 2 = str +]\")"
	"('outputexp', \"['+ COLON ' 1 1 + 2 = str +]\")" -> "('outputexp', \"['+ COLON ' 1 -1 + 0 = str +]\")"
	"('outputexp', \"['+ COLON ' 1 -1 + 0 = str +]\")" -> "('outputexp', \"['+ COLON ' '1' '-1' + '1-1' = str +]\")"
	"('outputexp', \"['+ COLON ' '1' '-1' + '1-1' = str +]\")" -> "('outputexp', \"['+ COLON ' '1' '' + '1' = str +]\")"
	"('outputexp', \"['+ COLON ' '1' '' + '1' = str +]\")" -> "('outputexp', \"['- COLON ' 1 1 - 0 = str +]\")"
	"('outputexp', \"['- COLON ' 1 1 - 0 = str +]\")" -> "('outputexp', \"['- COLON ' 1 -1 - 2 = str +]\")"
	"('outputexp', \"['- COLON ' 1 -1 - 2 = str +]\")" -> "('outputexp', \"['* COLON ' 1 1 * 1 = str +]\")"
	"('outputexp', \"['* COLON ' 1 1 * 1 = str +]\")" -> "('outputexp', \"['* COLON ' 1 -1 * -1 = str +]\")"
	"('outputexp', \"['* COLON ' 1 -1 * -1 = str +]\")" -> "('outputexp', \"['* COLON ' 3 4 * 12 = str +]\")"
	"('outputexp', \"['* COLON ' 3 4 * 12 = str +]\")" -> "('outputexp', \"['* COLON ' '1' 4 * '1111' = str +]\")"
	"('outputexp', \"['* COLON ' '1' 4 * '1111' = str +]\")" -> "('outputexp', \"['* COLON ' '' 4 * '' = str +]\")"
	"('outputexp', \"['* COLON ' '' 4 * '' = str +]\")" -> "('outputexp', \"['/ COLON ' 1 2 / 0.5 = str +]\")"
	"('outputexp', \"['/ COLON ' 1 2 / 0.5 = str +]\")" -> "('outputexp', \"['/ COLON ' 2 2 / 1 = str +]\")"
	"('outputexp', \"['/ COLON ' 2 2 / 1 = str +]\")" -> "('outputexp', \"['/ COLON ' 1 -2 / -0.5 = str +]\")"
	"('outputexp', \"['/ COLON ' 1 -2 / -0.5 = str +]\")" -> "('outputexp', \"['/ COLON ' 0 1 / 0 = str +]\")"
	"('outputexp', \"['/ COLON ' 0 1 / 0 = str +]\")" -> "('outputexp', \"['// COLON ' 1 2 // 0 = str +]\")"
	"('outputexp', \"['// COLON ' 1 2 // 0 = str +]\")" -> "('outputexp', \"['// COLON ' 2 2 // 1 = str +]\")"
	"('outputexp', \"['// COLON ' 2 2 // 1 = str +]\")" -> "('outputexp', \"['// COLON ' 2 1 // 2 = str +]\")"
	"('outputexp', \"['// COLON ' 2 1 // 2 = str +]\")" -> "('outputexp', \"['// COLON ' 1 -2 // -1 = str +]\")"
	"('outputexp', \"['// COLON ' 1 -2 // -1 = str +]\")" -> "('outputexp', \"['// COLON ' 0 1 // 0 = str +]\")"
	"('outputexp', \"['// COLON ' 0 1 // 0 = str +]\")" -> "('outputexp', \"['% COLON ' 5 1 % 0 = str +]\")"
	"('outputexp', \"['% COLON ' 5 1 % 0 = str +]\")" -> "('outputexp', \"['% COLON ' 5 2 % 1 = str +]\")"
	"('outputexp', \"['% COLON ' 5 2 % 1 = str +]\")" -> "('outputexp', \"['% COLON ' 1 3 % 1 = str +]\")"
	"('outputexp', \"['% COLON ' 1 3 % 1 = str +]\")" -> "('outputexp', \"['@ COLON ' 1 2 3 3 \\ 4 5 6 3 \\ @ 1 2 3 4 5 6 6 \\ = str +]\")"
	"('outputexp', \"['@ COLON ' 1 2 3 3 \\ 4 5 6 3 \\ @ 1 2 3 4 5 6 6 \\ = str +]\")" -> "('outputexp', \"['@ COLON ' 0 \\ 0 \\ @ 0 \\ = str +]\")"
	"('outputexp', \"['@ COLON ' 0 \\ 0 \\ @ 0 \\ = str +]\")" -> "('outputexp', \"['@ COLON ' 0 \\ 4 5 6 3 \\ @ 4 5 6 3 \\ = str +]\")"
	"('outputexp', \"['@ COLON ' 0 \\ 4 5 6 3 \\ @ 4 5 6 3 \\ = str +]\")" -> "('outputexp', \"['COLON COLON ' 0 \\ 1 COLON 1 1 \\ = str + ]\")"
	"('outputexp', \"['COLON COLON ' 0 \\ 1 COLON 1 1 \\ = str + ]\")" -> "('outputexp', \"['COLON COLON ' 0 \\ 0 \\ COLON splat # 0 = str + ]\")"
	"('outputexp', \"['COLON COLON ' 0 \\ 0 \\ COLON splat # 0 = str + ]\")" -> "('outputexp', \"['swap COLON ' 1 2 swap - 1 = str +]\")"
	"('outputexp', \"['swap COLON ' 1 2 swap - 1 = str +]\")" -> "('outputexp', \"['swap COLON ' 'a' 'b' swap + 'ba' = str +]\")"
	"('outputexp', \"['swap COLON ' 'a' 'b' swap + 'ba' = str +]\")" -> "('outputexp', \"['nth COLON ' 1 2 3 3 \\ 2 nth 3 = str +]\")"
	"('outputexp', \"['nth COLON ' 1 2 3 3 \\ 2 nth 3 = str +]\")" -> "('outputexp', \"['nth COLON ' 1 2 3 3 \\ 0 nth 1 = str +]\")"
	"('outputexp', \"['nth COLON ' 1 2 3 3 \\ 0 nth 1 = str +]\")" -> "('outputexp', \"['min COLON ' 1 2 min 1 = str +]\")"
	"('outputexp', \"['min COLON ' 1 2 min 1 = str +]\")" -> "('outputexp', \"['max COLON ' 1 2 max 2 = str +]\")"
	"('outputexp', \"['max COLON ' 1 2 max 2 = str +]\")" -> "('outputexp', \"['split COLON ' 'test' 't' split '' 'es' '' 3 \\ = str +]\")"
	"('outputexp', \"['split COLON ' 'test' 't' split '' 'es' '' 3 \\ = str +]\")" -> "('outputexp', \"['split COLON ' 'a b c d e f' ' ' split 'a' 'b' 'c' 'd' 'e' 'f' 6 \\ = str +]\")"
	"('outputexp', \"['split COLON ' 'a b c d e f' ' ' split 'a' 'b' 'c' 'd' 'e' 'f' 6 \\ = str +]\")" -> "('mark', 'nops')"
	"('mark', 'nops')" -> "('outputexp', \"['running nops']\")"
	"('outputexp', \"['running nops']\")" -> "('outputexp', \"['\\ COLON ' 1 2 3 3 \\ str '[1.0, 2.0, 3.0]' = str +]\")"
	"('outputexp', \"['\\ COLON ' 1 2 3 3 \\ str '[1.0, 2.0, 3.0]' = str +]\")" -> "('outputexp', \"['\\ COLON ' 0 \\ str '[]' = str +]\")"
	"('outputexp', \"['\\ COLON ' 0 \\ str '[]' = str +]\")" -> "('outputexp', \"['dropn COLON ' 1 2 3 4 5 2 dropn 3 \\ 1 2 3 3 \\ = str +]\")"
	"('outputexp', \"['dropn COLON ' 1 2 3 4 5 2 dropn 3 \\ 1 2 3 3 \\ = str +]\")" -> "('outputexp', \"[1 2 3 4 5 top 'top COLON ' swap 5 = str +]\")"
	"('outputexp', \"[1 2 3 4 5 top 'top COLON ' swap 5 = str +]\")" -> "('outputexp', \"[1 2 3 4 5 2 topn + 'topn COLON ' swap 9 = str +]\")"
	"('outputexp', \"[1 2 3 4 5 2 topn + 'topn COLON ' swap 9 = str +]\")" -> "('outputexp', \"['rand COLON ' rand dup 0 > swap 1 < & str +]\")"
	"('outputexp', \"['rand COLON ' rand dup 0 > swap 1 < & str +]\")" -> "('mark', 'end')"
}
